# The OWASP CSRFGuard Project, BSD License
# Eric Sheridan (eric@infraredsecurity.com), Copyright (c) 2011
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of OWASP nor the names of its contributors may be used
#    to endorse or promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Logger
#
# The logger property (org.owasp.csrfguard.Logger) defines the qualified class name of
# the object responsible for processing all log messages produced by CSRFGuard. The default
# CSRFGuard logger is org.owasp.csrfguard.log.ConsoleLogger. This class logs all messages
# to System.out which JavaEE application servers redirect to a vendor specific log file.
# Developers can customize the logging behavior of CSRFGuard by implementing the
# org.owasp.csrfguard.log.ILogger interface and setting the logger property to the new
# logger's qualified class name. The following configuration snippet instructs OWASP CSRFGuard
# to capture all log messages to the console:
#
# org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.ConsoleLogger
org.owasp.csrfguard.Logger=org.owasp.csrfguard.log.JavaLogger

# New Token Landing Page
#
# The new token landing page property (org.owasp.csrfguard.NewTokenLandingPage) defines where
# to send a user if the token is being generated for the first time, and the use new token landing
# page boolean property (org.owasp.csrfguard.UseNewTokenLandingPage) determines if any redirect happens.
# UseNewTokenLandingPage defaults to false if NewTokenLandingPage is not specified, and to true
# if it is specified.. If UseNewTokenLandingPage is set true then this request is generated
# using auto-posting forms and will only contain the CSRF prevention token parameter, if
# applicable. All query-string or form parameters sent with the original request will be
# discarded. If this property is not defined, CSRFGuard will instead auto-post the user to the
# original context and servlet path. The following configuration snippet instructs OWASP CSRFGuard to
# redirect the user to /Owasp.CsrfGuard.Test/index.html when the user visits a protected resource
# without having a corresponding CSRF token present in the HttpSession object:
#
# org.owasp.csrfguard.NewTokenLandingPage=/Owasp.CsrfGuard.Test/index.html

# Protected Methods
#
# The protected methods property (org.owasp.csrfguard.ProtectedMethods) defines a comma
# separated list of HTTP request methods that should be protected by CSRFGuard. The default
# list is an empty list which will cause all HTTP methods to be protected, thus preserving
# legacy behavior. This setting allows the user to inform CSRFGuard that only requests of the
# given types should be considered for protection. All HTTP methods not in the list will be
# considered safe (i.e. view only / unable to modify data). This should be used only when the
# user has concrete knowledge that all requests made via methods not in the list
# are safe (i.e. do not apply an action to any data) since it can actually introduce new
# security vulnerabilities. For example: the user thinks that all actionable requests are
# only available by POST requests when in fact some are available via GET requests. If the
# user has excluded GET requests from the list then they have introduced a vulnerability.
# The following configuration snippet instructs OWASP CSRFGuard to protect only the POST,
# PUT, and DELETE HTTP methods.
#
# org.owasp.csrfguard.ProtectedMethods=POST,PUT,DELETE

# Unique Per-Page Tokens
#
# The unique token per-page property (org.owasp.csrfguard.TokenPerPage) is a boolean value that
# determines if CSRFGuard should make use of unique per-page (i.e. URI) prevention tokens as
# opposed to unique per-session prevention tokens. When a user requests a protected resource,
# CSRFGuard will determine if a page specific token has been previously generated. If a page
# specific token has not yet been previously generated, CSRFGuard will verify the request was
# submitted with the per-session token intact. After verifying the presence of the per-session token,
# CSRFGuard will create a page specific token that is required for all subsequent requests to the
# associated resource. The per-session CSRF token can only be used when requesting a resource for
# the first time. All subsequent requests must have the per-page token intact or the request will
# be treated as a CSRF attack. This behavior can be changed with the org.owasp.csrfguard.TokenPerPagePrecreate
# property. Enabling this property will make CSRFGuard calculate the per page token prior to a first
# visit. This option only works with JSTL token injection and is useful for preserving the validity of
# links if the user pushes the back button. There may be a performance impact when enabling this option
# if the .jsp has a large number of proctected links that need tokens to be calculated.
# Use of the unique token per page property is currently experimental
# but provides a significant amount of improved security. Consider the exposure of a CSRF token using
# the legacy unique per-session model. Exposure of this token facilitates the attacker's ability to
# carry out a CSRF attack against the victim's active session for any resource exposed by the web
# application. Now consider the exposure of a CSRF token using the experimental unique token per-page
# model. Exposure of this token would only allow the attacker to carry out a CSRF attack against the
# victim's active session for a small subset of resources exposed by the web application. Use of the
# unique token per-page property is a strong defense in depth strategy significantly reducing the
# impact of exposed CSRF prevention tokens. The following configuration snippet instructs OWASP
# CSRFGuard to utilize the unique token per-page model:
#
# org.owasp.csrfguard.TokenPerPage=true
# org.owasp.csrfguard.TokenPerPagePrecreate=false
org.owasp.csrfguard.TokenPerPage=true
org.owasp.csrfguard.TokenPerPagePrecreate=false

# Token Rotation
#
# The rotate token property (org.owasp.csrfguard.Rotate) is a boolean value that determines if
# CSRFGuard should generate and utilize a new token after verifying the previous token. Rotation
# helps minimize the window of opportunity an attacker has to leverage the victim's stolen token
# in a targeted CSRF attack. However, this functionality generally causes navigation problems in
# most applications. Specifically, the 'Back' button in the browser will often cease to function
# properly. When a user hits the 'Back' button and interacts with the HTML, the browser may submit
# an old token causing CSRFGuard to incorrectly believe this request is a CSRF attack in progress
# (i.e. a 'false positive'). Users can prevent this scenario by preventing the caching of HTML pages
# containing FORM submissions using the cache-control header. However, this may also introduce
# performance problems as the browser will have to request HTML on a more frequent basis. The following
# configuration snippet enables token rotation:
#
# org.owasp.csrfguard.Rotate=true

# Ajax and XMLHttpRequest Support
#
# The Ajax property (org.owasp.csrfguard.Ajax) is a boolean value that indicates whether or not OWASP
# CSRFGuard should support the injection and verification of unique per-session prevention tokens for
# XMLHttpRequests. To leverage Ajax support, the user must not only set this property to true but must
# also reference the JavaScript DOM Manipulation code using a script element. This dynamic script will
# override the send method of the XMLHttpRequest object to ensure the submission of an X-Requested-With
# header name value pair coupled with the submission of a custom header name value pair for each request.
# The name of the custom header is the value of the token name property and the value of the header is
# always the unique per-session token value. This custom header is analogous to the HTTP parameter name
# value pairs submitted via traditional GET and POST requests. If the X-Requested-With header was sent
# in the HTTP request, then CSRFGuard will look for the presence and ensure the validity of the unique
# per-session token in the custom header name value pair. Note that verification of these headers takes
# precedence over verification of the CSRF token supplied as an HTTP parameter. More specifically,
# CSRFGuard does not verify the presence of the CSRF token if the Ajax support property is enabled and
# the corresponding X-Requested-With and custom headers are embedded within the request. The following
# configuration snippet instructs OWASP CSRFGuard to support Ajax requests by verifying the presence and
# correctness of the X-Requested-With and custom headers:
#
# org.owasp.csrfguard.Ajax=true
org.owasp.csrfguard.Ajax=true

# The default behavior of CSRFGuard is to protect all pages. Pages marked as unprotected will not be protected.
# If the Protect property is enabled, this behavior is reversed. Pages must be marked as protected to be protected.
# All other pages will not be protected. This is useful when the CsrfGuardFilter is aggressively mapped (ex: /*),
# but you only want to protect a few pages.
#
org.owasp.csrfguard.Protect=true

# Protected Pages:
org.owasp.csrfguard.protected.acceptForm=/ocr/sponsor/protocol/review/ajax/acceptForm.action
org.owasp.csrfguard.protected.acceptRegistration=/ocr/sponsor/protocol/review/ajax/acceptRegistration.action
org.owasp.csrfguard.protected.addFinancialDisclosureDocument=/ocr/investigator/registration/ajax/financialdisclosure/addDocument.action
org.owasp.csrfguard.protected.addFinancialDisclosureDocumentAnnualRegistration=/ocr/investigator/annual/registration/ajax/financialdisclosure/addDocument.action
org.owasp.csrfguard.protected.addFromProfile=/ocr/investigator/registration/ajax/subinvestigator/addFromProfile.action
org.owasp.csrfguard.protected.addInvestigator=/ocr/sponsor/representative/protocol/ajax/addInvestigator.action
org.owasp.csrfguard.protected.annual.registration.saveFormAjax=/sponsor/annual/registration/ajax/saveForm.action
org.owasp.csrfguard.protected.approvePacket=/ocr/sponsor/protocol/review/ajax/approvePacket.action
org.owasp.csrfguard.protected.confirmDelete=/ocr/investigator/registration/ajax/subinvestigator/confirmDelete.action
org.owasp.csrfguard.protected.confirmSelection=/ocr/coordinator/investigators/ajax/confirmSelection.action
org.owasp.csrfguard.protected.continueSelection=/ocr/coordinator/investigators/ajax/continueSelection.action
org.owasp.csrfguard.protected.createPrimaryOrganization=/ocr/investigator/profile/contact/ajax/createPrimaryOrganization.action
org.owasp.csrfguard.protected.deactivateRegistrationPacket=/ocr/sponsor/representative/protocol/ajax/deactivateRegistrationPacket.action
org.owasp.csrfguard.protected.deleteAssociationCertificate=/ocr/investigator/profile/associations/org/ajax/deleteCertificate.action
org.owasp.csrfguard.protected.deleteCertification=/ocr/investigator/profile/credentials/ajax/deleteCertification.action
org.owasp.csrfguard.protected.deleteCredentialsCertificate=/ocr/investigator/profile/credentials/ajax/deleteCertificate.action
org.owasp.csrfguard.protected.deleteDegree=/ocr/investigator/profile/credentials/ajax/deleteDegree.action
org.owasp.csrfguard.protected.deleteFile=/ocr/investigator/profile/files/ajax/delete.action
org.owasp.csrfguard.protected.deleteFinancialDisclosureFile=/ocr/investigator/registration/ajax/financialdisclosure/delete.action
org.owasp.csrfguard.protected.deleteFinancialDisclosureFileAnnualRegistration=/ocr/investigator/annual/registration/ajax/financialdisclosure/delete.action
org.owasp.csrfguard.protected.deleteLicense=/ocr/investigator/profile/credentials/ajax/deleteLicense.action
org.owasp.csrfguard.protected.deleteRegistrationCertificate=/ocr/investigator/registration/ajax/deleteCertificate.action
org.owasp.csrfguard.protected.deleteSpecialty=/ocr/investigator/profile/credentials/ajax/deleteSpecialty.action
org.owasp.csrfguard.protected.deleteSubinvestigator=/ocr/investigator/registration/ajax/subinvestigator/delete.action
org.owasp.csrfguard.protected.deselectCertificate=/ocr/investigator/registration/ajax/humanresearchcertificate/deselectCertificate.action
org.owasp.csrfguard.protected.deselectIrb=/ocr/investigator/registration/ajax/fda1572/irb/deselectOrganization.action
org.owasp.csrfguard.protected.deselectLab=/ocr/investigator/registration/ajax/fda1572/lab/deselectOrganization.action
org.owasp.csrfguard.protected.deselectPracticeSite=/ocr/investigator/registration/ajax/fda1572/practiceSite/deselectOrganization.action
org.owasp.csrfguard.protected.importRecords=/ocr/sponsor/representative/protocol/importRecords.action
org.owasp.csrfguard.protected.inviteInvestigator=/ocr/sponsor/representative/protocol/ajax/invite.action
org.owasp.csrfguard.protected.inviteSubinvestigator=/ocr/investigator/registration/ajax/subinvestigator/invite.action
org.owasp.csrfguard.protected.reactivateRegistrationPacket=/ocr/sponsor/representative/protocol/ajax/reactivateRegistrationPacket.action
org.owasp.csrfguard.protected.rejectForm=/ocr/sponsor/protocol/review/ajax/rejectForm.action
org.owasp.csrfguard.protected.rejectRegistration=/ocr/sponsor/protocol/review/ajax/rejectRegistration.action
org.owasp.csrfguard.protected.removeCoordinator=/ocr/investigator/coordinators/ajax/removeCoordinator.action
org.owasp.csrfguard.protected.removeDelegate=/ocr/sponsor/representative/ajax/removeDelegate.action
org.owasp.csrfguard.protected.removeOrganizationAssociation=/ocr/investigator/profile/associations/org/ajax/removeOrganizationAssociation.action
org.owasp.csrfguard.protected.removePersonAssociation=/ocr/investigator/profile/associations/person/ajax/removePersonAssociation.action
org.owasp.csrfguard.protected.removePharmaceuticalCompany=/ocr/investigator/annual/registration/ajax/financialdisclosure/removePharmaceuticalCompany.action
org.owasp.csrfguard.protected.removeRegistrationPacket=/ocr/sponsor/representative/protocol/ajax/removeRegistrationPacket.action
org.owasp.csrfguard.protected.removeRole=/ocr/user/ajax/removeRole.action
org.owasp.csrfguard.protected.save1572=/ocr/investigator/annual/registration/ajax/fda1572/save.action
org.owasp.csrfguard.protected.saveCertification=/ocr/investigator/profile/credentials/ajax/saveCertification.action
org.owasp.csrfguard.protected.saveDegree=/ocr/investigator/profile/credentials/ajax/saveDegree.action
org.owasp.csrfguard.protected.saveExperience=/ocr/investigator/profile/credentials/ajax/saveExperience.action
org.owasp.csrfguard.protected.saveFinancialDisclosure=/ocr/investigator/registration/ajax/financialdisclosure/save.action
org.owasp.csrfguard.protected.saveFinancialDisclosureAnnualRegistration=/ocr/investigator/annual/registration/ajax/financialdisclosure/save.action
org.owasp.csrfguard.protected.saveFormConfiguration=/ocr/sponsor/annual/registration/saveFormConfiguration.action
org.owasp.csrfguard.protected.saveForms=/ocr/sponsor/representative/protocol/ajax/saveForms.action
org.owasp.csrfguard.protected.saveHumanResearchCertificate=/ocr/investigator/profile/credentials/ajax/saveCertificate.action
org.owasp.csrfguard.protected.saveLicense=/ocr/investigator/profile/credentials/ajax/saveLicense.action
org.owasp.csrfguard.protected.saveOrganizationAssociation=/ocr/investigator/profile/associations/org/ajax/save.action
org.owasp.csrfguard.protected.savePersonAssociation=/ocr/investigator/profile/associations/person/ajax/save.action
org.owasp.csrfguard.protected.savePharmaceuticalCompany=/ocr/investigator/annual/registration/ajax/financialdisclosure/savePharmaceuticalCompany.action
org.owasp.csrfguard.protected.saveProfileCertificate=/ocr/investigator/profile/associations/org/ajax/saveCertificate.action
org.owasp.csrfguard.protected.saveProtocol=/ocr/sponsor/representative/protocol/save.action
org.owasp.csrfguard.protected.saveSpecialty=/ocr/investigator/profile/credentials/ajax/saveSpecialty.action
org.owasp.csrfguard.protected.saveSubinvestigatorAssociation=/ocr/investigator/registration/subinvestigator/associations/person/ajax/save.action
org.owasp.csrfguard.protected.selectAssociatedOrganization=/ocr/investigator/profile/associations/org/ajax/selectAssociatedOrganization.action
org.owasp.csrfguard.protected.selectCertificate=/ocr/investigator/registration/ajax/humanresearchcertificate/selectCertificate.action
org.owasp.csrfguard.protected.selectFile=/ocr/investigator/registration/ajax/additionalattachments/selectFile.action
org.owasp.csrfguard.protected.selectInvestigator=/ocr/sponsor/representative/protocol/ajax/selectInvestigator.action
org.owasp.csrfguard.protected.selectIrb=/ocr/investigator/registration/ajax/fda1572/irb/selectOrganization.action
org.owasp.csrfguard.protected.selectIrbAnnualRegistration=/ocr/investigator/annual/registration/ajax/fda1572/irb/selectOrganization.action
org.owasp.csrfguard.protected.selectLab=/ocr/investigator/registration/ajax/fda1572/lab/selectOrganization.action
org.owasp.csrfguard.protected.selectLabAnnualRegistration=/ocr/investigator/annual/registration/ajax/fda1572/lab/selectOrganization.action
org.owasp.csrfguard.protected.selectOrganizationAndClose=/ocr/investigator/profile/contact/ajax/selectOrganizationAndClose.action
org.owasp.csrfguard.protected.selectPharmaceuticalCompany=/ocr/investigator/annual/registration/ajax/financialdisclosure/selectPharmaceuticalCompany.action
org.owasp.csrfguard.protected.selectPracticeSite=/ocr/investigator/registration/ajax/fda1572/practiceSite/selectOrganization.action
org.owasp.csrfguard.protected.selectPracticeSiteAnnualRegistration=/ocr/investigator/annual/registration/ajax/fda1572/practiceSite/selectOrganization.action
org.owasp.csrfguard.protected.signAnnualRegistration=/ocr/investigator/annual/registration/ajax/sign.action
org.owasp.csrfguard.protected.signRegistration=/ocr/investigator/registration/ajax/sign.action
org.owasp.csrfguard.protected.submitAnnualRegistration=/ocr/investigator/annual/registration/ajax/submitRegistration.action
org.owasp.csrfguard.protected.submitComments=/ocr/investigator/registration/ajax/submitComments.action
org.owasp.csrfguard.protected.submitRegistration=/ocr/investigator/registration/ajax/submitRegistration.action
org.owasp.csrfguard.protected.suspendCoordinatorFromProfile=/ocr/investigator/coordinators/ajax/suspendCoordinatorFromProfile.action
org.owasp.csrfguard.protected.suspendCoordinatorFromRegistrations=/ocr/investigator/coordinators/ajax/suspendCoordinatorFromRegistrations.action
org.owasp.csrfguard.protected.toggleReviewOnHold=/ocr/sponsor/annual/registration/review/ajax/toggleReviewOnHold.action
org.owasp.csrfguard.protected.unsuspendCoordinatorFromProfile=/ocr/investigator/coordinators/ajax/unsuspendCoordinatorFromProfile.action
org.owasp.csrfguard.protected.unsuspendCoordinatorFromRegistrations=/ocr/investigator/coordinators/ajax/unsuspendCoordinatorFromRegistrations.action
org.owasp.csrfguard.protected.updateOhrp=/ocr/investigator/profile/associations/org/ajax/updateOhrp.action
org.owasp.csrfguard.protected.updatePersonAjax=/ocr/investigator/profile/contact/ajax/updatePersonAjax.action
org.owasp.csrfguard.protected.updateProtocol=/ocr/sponsor/representative/protocol/updateProtocol.action
org.owasp.csrfguard.protected.uploadAdditionalAttachment=/ocr/investigator/registration/ajax/additionalattachments/upload.action
org.owasp.csrfguard.protected.uploadCertificate=/ocr/investigator/registration/ajax/saveCertificate.action
org.owasp.csrfguard.protected.uploadImportFile=/ocr/sponsor/representative/protocol/uploadImportFile.action
org.owasp.csrfguard.protected.disqualifyInvestigator=/ocr/sponsor/annual/registration/review/ajax/disqualifyInvestigator.action
org.owasp.csrfguard.protected.selectSubinvestigator=/ocr/investigator/registration/subinvestigator/associations/person/ajax/select.action
org.owasp.csrfguard.protected.clearForm=/ocr/sponsor/annual/registration/review/ajax/clearForm.action
org.owasp.csrfguard.protected.rejectAnnualRegistration=/ocr/sponsor/annual/registration/review/ajax/rejectRegistration.action
org.owasp.csrfguard.protected.acceptAnnualRegistrationForm=/ocr/sponsor/annual/registration/review/ajax/acceptForm.action
org.owasp.csrfguard.protected.rejectAnnualRegistrationForm=/ocr/sponsor/annual/registration/review/ajax/rejectForm.action
org.owasp.csrfguard.protected.uploadAnnualRegistrationAdditionalAttachment=/ocr/investigator/annual/registration/ajax/additionalattachments/upload.action
org.owasp.csrfguard.protected.clearAnnualRegistrationForm=/ocr/sponsor/protocol/review/ajax/clearForm.action
org.owasp.csrfguard.protected.denyRequest=/ocr/sponsor/annual/investigator/ajax/denyRequest.action
org.owasp.csrfguard.protected.approveAnnualRegistration=/ocr/sponsor/annual/registration/review/ajax/approveRegistration.action
org.owasp.csrfguard.protected.reactivateInvestigator=/ocr/investigator/annual/registration/ajax/reactivate/reactivateInvestigator.action
org.owasp.csrfguard.protected.saveToggleReviewOnHold=/ocr/sponsor/annual/registration/review/ajax/saveToggleReviewOnHold.action
org.owasp.csrfguard.protected.submitWithdraw=/ocr/investigator/annual/registration/ajax/withdraw/submitWithdraw.action
org.owasp.csrfguard.protected.acceptRequest=/ocr/sponsor/annual/investigator/ajax/acceptRequest.action
org.owasp.csrfguard.protected.initiateRegistrationRevision=/ocr/investigator/registration/ajax/initiateRegistrationRevision.action
org.owasp.csrfguard.protected.acceptAnnualRegistration=/ocr/sponsor/annual/registration/review/ajax/acceptRegistration.action
org.owasp.csrfguard.protected.removeOrderingDesignee=/ocr/investigator/profile/associations/person/ajax/removeOrderingDesignee.action
org.owasp.csrfguard.protected.profileSelectSubinvestigator=/ocr/investigator/profile/associations/subinvestigators/ajax/select.action
org.owasp.csrfguard.protected.annualRegistrationDeselectLab=/ocr/investigator/annual/registration/ajax/fda1572/lab/deselectOrganization.action
org.owasp.csrfguard.protected.deleteResidency=/ocr/investigator/profile/credentials/ajax/deleteResidency.action
org.owasp.csrfguard.protected.deleteWorkHistory=/ocr/investigator/profile/credentials/ajax/deleteWorkHistory.action
org.owasp.csrfguard.protected.setShippingDesignee=/ocr/investigator/profile/associations/designees/ajax/setShippingDesignee.action
org.owasp.csrfguard.protected.saveResidency=/ocr/investigator/profile/credentials/ajax/saveResidency.action
org.owasp.csrfguard.protected.deleteFellowship=/ocr/investigator/profile/credentials/ajax/deleteFellowship.action
org.owasp.csrfguard.protected.saveFellowship=/ocr/investigator/profile/credentials/ajax/saveFellowship.action
org.owasp.csrfguard.protected.saveOrderingDesignee=/ocr/investigator/profile/associations/designees/ajax/saveOrderingDesignee.action
org.owasp.csrfguard.protected.cancelRegistrationRevision=/ocr/investigator/registration/ajax/cancelRegistrationRevision.action
org.owasp.csrfguard.protected.deleteInternship=/ocr/investigator/profile/credentials/ajax/deleteInternship.action
org.owasp.csrfguard.protected.requestAccount=/ocr/user/requestAccount.action
org.owasp.csrfguard.protected.removeSubinvestigator=/ocr/investigator/profile/associations/person/ajax/removeSubinvestigator.action
org.owasp.csrfguard.protected.saveInternship=/ocr/investigator/profile/credentials/ajax/saveInternship.action
org.owasp.csrfguard.protected.annualRegistrationDeselectPracticeSite=/ocr/investigator/annual/registration/ajax/fda1572/practiceSite/deselectOrganization.action
org.owasp.csrfguard.protected.annualRegistrationDeselectIrb=/ocr/investigator/annual/registration/ajax/irb/practiceSite/deselectOrganization.action
org.owasp.csrfguard.protected.saveWorkHistory=/ocr/investigator/profile/credentials/ajax/saveWorkHistory.action
org.owasp.csrfguard.protected.selectOrderingDesignee=/ocr/investigator/profile/associations/designees/ajax/selectOrderingDesignee.action
org.owasp.csrfguard.protected.removeShippingDesignee=/ocr/investigator/profile/associations/person/ajax/removeShippingDesignee.action
org.owasp.csrfguard.protected.saveProfileSubinvestigator=/ocr/investigator/profile/associations/subinvestigators/ajax/save.action
org.owasp.csrfguard.protected.saveAndValidateLeadOrganization=/ocr/sponsor/representative/protocol/ajax/saveAndValidateLeadOrganization.action
org.owasp.csrfguard.protected.uploadFile=/ocr/investigator/profile/files/ajax/upload.action
org.owasp.csrfguard.protected.saveNewUserRegistration=/ocr/user/registration/flow/verification/nextStep.action
org.owasp.csrfguard.protected.addInvestigatorDuringRegistration=/ocr/user/registration/flow/investigatorSelection/addInvestigator.action
org.owasp.csrfguard.protected.removeInvestigatorDuringRegistration=/ocr/user/registration/flow/investigatorSelection/removeInvestigator.action
org.owasp.csrfguard.protected.acceptCoordinatorRequest=/ocr/investigator/settings/ajax/acceptCoordinatorRequest.action
org.owasp.csrfguard.protected.rejectCoordinatorRequest=/ocr/investigator/settings/ajax/rejectCoordinatorRequest.action

# Unprotected Pages:
#
# The unprotected pages property (org.owasp.csrfguard.unprotected.*) defines a series of pages that
# should not be protected by CSRFGuard. Such configurations are useful when the CsrfGuardFilter is
# aggressively mapped (ex: /*). The syntax of the property name is org.owasp.csrfguard.unprotected.[PageName],
# where PageName is some arbitrary identifier that can be used to reference a resource. The syntax of
# defining the uri of unprotected pages is the same as the syntax used by the JavaEE container for uri mapping.
# Specifically, CSRFGuard will identify the first match (if any) between the requested uri and an unprotected
# page in order of declaration. Match criteria is as follows:
#
# Case 1: exact match between request uri and unprotected page
# Case 2: longest path prefix match, beginning / and ending /*
# Case 3: extension match, beginning *.
# Default: requested resource must be validated by CSRFGuard
#
# The following code snippet illustrates the three use cases over four examples. The first two examples
# (Tag and JavaScriptServlet) look for direct URI matches. The third example (Html) looks for all resources
# ending in a .html extension. The last example (Public) looks for all resources prefixed with the URI path /MySite/Public/*.
#
# org.owasp.csrfguard.unprotected.Tag=/Owasp.CsrfGuard.Test/tag.jsp
# org.owasp.csrfguard.unprotected.JavaScriptServlet=/Owasp.CsrfGuard.Test/JavaScriptServlet
# org.owasp.csrfguard.unprotected.Html=*.html
# org.owasp.csrfguard.unprotected.Public=/MySite/Public/*

# Actions: Responding to Attacks
#
# The actions directive (org.owasp.csrfguard.action.*) gives the user the ability to specify one or more
# actions that should be invoked when a CSRF attack is detected. Every action must implement the
# org.owasp.csrfguard.action.IAction interface either directly or indirectly through the
# org.owasp.csrfguard.action.AbstractAction helper class. Many actions accept parameters that can be specified
# along with the action class declaration. These parameters are consumed at runtime and impact the behavior of
# the associated action.
#
# The syntax for defining and configuring CSRFGuard actions is relatively straight forward. Let us assume we wish
# to redirect the user to a default page when a CSRF attack is detected. A redirect action already exists within
# the CSRFGuard bundle and is available via the class name org.owasp.csrfguard.actions.Redirect. In order to enable
# this action, we capture the following declaration in the Owasp.CsrfGuard.properties file:
#
# syntax: org.owasp.csrfguard.action.[actionName]=[className]
# example: org.owasp.csrfguard.action.class.Redirect=org.owasp.csrfguard.actions.Redirect
#
# The aforementioned directive declares an action called "Redirect" (i.e. [actionName]) referencing the Java class
# "org.owasp.csrfguard.actions.Redirect" (i.e. [className]). Anytime a CSRF attack is detected, the Redirect action
# will be executed. You may be asking yourself, "but how do I specify where the user is redirected?"; this is where
# action parameters come into play. In order to specify the redirect location, we capture the following declaration
# in the Owasp.CsrfGuard.properties file:
#
# syntax: org.owasp.csrfguard.action.[actionName].[parameterName]=[parameterValue]
# example: org.owasp.csrfguard.action.Redirect.ErrorPage=/Owasp.CsrfGuard.Test/error.html
#
# The aforementioned directive declares an action parameter called "ErrorPage" (i.e. [parameterName]) with the value
# of "/Owasp.CsrfGuard.Test/error.html" (i.e. [parameterValue]) for the action "Redirect" (i.e. [actionName]). The
# Redirect action expects the "ErrorPage" parameter to be defined and will redirect the user to this location when
# an attack is detected.
#
#org.owasp.csrfguard.action.Empty=org.owasp.csrfguard.action.Empty
org.owasp.csrfguard.action.Log=org.owasp.csrfguard.action.Log
org.owasp.csrfguard.action.Log.Message=potential cross-site request forgery (CSRF) attack thwarted (user:%user%, ip:%remote_ip%, uri:%request_uri%, error:%exception_message%)
#org.owasp.csrfguard.action.Invalidate=org.owasp.csrfguard.action.Invalidate
org.owasp.csrfguard.action.Redirect=org.owasp.csrfguard.action.Redirect
org.owasp.csrfguard.action.Redirect.Page=/ocr/error.jsp
#org.owasp.csrfguard.action.RequestAttribute=org.owasp.csrfguard.action.RequestAttribute
#org.owasp.csrfguard.action.RequestAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key
org.owasp.csrfguard.action.Rotate=org.owasp.csrfguard.action.Rotate
#org.owasp.csrfguard.action.SessionAttribute=org.owasp.csrfguard.action.SessionAttribute
#org.owasp.csrfguard.action.SessionAttribute.AttributeName=Owasp_CsrfGuard_Exception_Key

# Token Name
#
# The token name property (org.owasp.csrfguard.TokenName) defines the name of the HTTP parameter
# to contain the value of the OWASP CSRFGuard token for each request. The following configuration
# snippet sets the CSRFGuard token parameter name to the value OWASP_CSRFTOKEN:
#
# org.owasp.csrfguard.TokenName=OWASP_CSRFTOKEN
org.owasp.csrfguard.TokenName=OWASP_CSRFTOKEN

# Session Key
#
# The session key property (org.owasp.csrfguard.SessionKey) defines the string literal used to save
# and lookup the CSRFGuard token from the session. This value is used by the filter and the tag
# libraries to retrieve and set the token value in the session. Developers can use this key to
# programmatically lookup the token within their own code. The following configuration snippet sets
# the session key to the value OWASP_CSRFTOKEN:
#
# org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN
org.owasp.csrfguard.SessionKey=OWASP_CSRFTOKEN

# Token Length
#
# The token length property (org.owasp.csrfguard.TokenLength) defines the number of characters that
# should be found within the CSRFGuard token. Note that characters are delimited by dashes (-) in groups
# of four. For cosmetic reasons, users are encourage to ensure the token length is divisible by four.
# The following configuration snippet sets the token length property to 32 characters:
#
# org.owasp.csrfguard.TokenLength=32
org.owasp.csrfguard.TokenLength=32

# Pseudo-random Number Generator
#
# The pseudo-random number generator property (org.owasp.csrfguard.PRNG) defines what PRNG should be used
# to generate the OWASP CSRFGuard token. Always ensure this value references a cryptographically strong
# pseudo-random number generator algorithm. The following configuration snippet sets the pseudo-random number
# generator to SHA1PRNG:
#
# org.owasp.csrfguard.PRNG=SHA1PRNG
org.owasp.csrfguard.PRNG=SHA1PRNG

# Pseudo-random Number Generator Provider

# The pseudo-random number generator provider property (org.owasp.csrfguard.PRNG.Provider) defines which
# provider's implementation of org.owasp.csrfguard.PRNG we should utilize. The following configuration
# snippet instructs the JVM to leverage SUN's implementation of the algorithm denoted by the
# org.owasp.csrfguard.PRNG property:

# org.owasp.csrfguard.PRNG.Provider=SUN
org.owasp.csrfguard.PRNG.Provider=SUN